# –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ(–ò–º–ø–æ—Ä—Ç—ã)
from email import message
from aiogram import *
import sqlite3
import time
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from aiogram.types import InputMedia, ContentType, PreCheckoutQuery, successful_payment, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from discord import VerificationLevel # –î–ª—è States

# –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
storage = MemoryStorage()
bot = Bot(token="5758494936:AAGtM5mI0mx1U79sZkrJFSreAsvXrpZhQ1c")
dp = Dispatcher(bot, storage=storage)
Database = "CheatersDatabase.db"
wait = 3
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO,)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
ChooseMode = types.InlineKeyboardMarkup(row_width=2)
UserMode = types.InlineKeyboardButton("üéÆ –ò–ì–†–û–ö üéÆ", callback_data="User")
AdminMode = types.InlineKeyboardButton("üíª –ê–î–ú–ò–ù üíª", callback_data="Admin")
ChooseMode.add(UserMode, AdminMode)

Return = types.InlineKeyboardMarkup(row_width=1)
Back = types.InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê ‚ùå", callback_data="back")
Return.add(Back)

Cancel = types.InlineKeyboardMarkup(row_width=1)
CancelB = types.InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê ‚ùå", callback_data="cancel")
Cancel.add(CancelB)

MainMenuAdmin = types.InlineKeyboardMarkup()
CheckNickname = types.InlineKeyboardButton("üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö", callback_data="checknickname")
CheckID = types.InlineKeyboardButton("üîé –ü–†–û–í–ï–†–ò–¢–¨ ID", callback_data="checkid")
AddCheater = types.InlineKeyboardButton("‚ûï –î–û–ë–ê–í–ò–¢–¨ –ß–ò–¢–ï–†–ê", callback_data="addcheater")
GroupLink = types.InlineKeyboardButton("üí≠ –ë–ï–°–ï–î–ê", url="https://t.me/+ySkQY4LKT2szYmQy")
MainMenuAdmin.add(CheckNickname, CheckID)
MainMenuAdmin.add(AddCheater)
MainMenuAdmin.add(GroupLink)

MainMenu = types.InlineKeyboardMarkup()
CheckNickname = types.InlineKeyboardButton("üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö", callback_data="checknickname")
CheckID = types.InlineKeyboardButton("üîé –ü–†–û–í–ï–†–ò–¢–¨ ID", callback_data="checkid")
GroupLink = types.InlineKeyboardButton("üí≠ –ë–ï–°–ï–î–ê", url="https://t.me/+ySkQY4LKT2szYmQy")
MainMenu.add(CheckNickname, CheckID)
MainMenu.add(GroupLink)


#States
class AddCheater(StatesGroup):
    SteamID = State()
    Nickname = State()

class Verefication(StatesGroup):
    Code = State()

class CheckNick(StatesGroup):
    Nickname = State()

class CheckID(StatesGroup):
    ID = State()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["changepassword"])
async def editculture1(message: types.Message):
    args = message.get_args().split()
    connect = sqlite3.connect(Database)
    cursor = connect.cursor()
    password = cursor.execute("SELECT admin_password FROM data").fetchone()[0]
    if password == args[0]:
        cursor.execute("""UPDATE data SET admin_password = ?""", (args[1],))
        cursor.close()
        connect.commit()
        connect.close()
    else:
        print("–û—à–∏–±–∫–∞...")

@dp.message_handler(commands=["stats"])
async def editculture1(message: types.Message):
    args = message.get_args().split()
    connect = sqlite3.connect(Database)
    cursor = connect.cursor()
    users = cursor.execute("SELECT id FROM users").fetchall()
    cheaters =cursor.execute("SELECT id FROM cheaters").fetchall()
    cursor.close()
    connect.commit()
    connect.close()
    await bot.send_message(message.from_user.id, f"*–í –±–æ—Ç–µ —Å–µ–π—á–∞—Å: {len(users)}\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–∏—Ç–µ—Ä–æ–≤: {len(cheaters)}*", parse_mode="Markdown")

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    global message1
    user_name = types.User.get_current()
    connect = sqlite3.connect(Database)
    cursor = connect.cursor()
    check = cursor.execute("SELECT * FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchall()
    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not bool(len(check)):
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (message.from_user.id,))
        cursor.execute("UPDATE users SET user_name = ? WHERE user_id = ?", (user_name['username'], message.from_user.id))
        cursor.close()
        connect.commit()
        connect.close()
        message1 = await bot.send_message(message.from_user.id, f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{message.from_user.first_name}!\n\n–ë–æ—Ç *–ø–æ–∑–≤–æ–ª—è–µ—Ç:*\n‚îè –ü—Ä–æ–≤–µ—Ä–∏—Ç—å *SteamID* –∏–≥—Ä–æ–∫–∞! _(–î–ª—è –≤—Å–µ—Ö)_\n‚î£ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å *–∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫* _(–î–ª—è –≤—Å–µ—Ö)_\n‚î£ –í–Ω–µ—Å—Ç–∏ *SteamID* –≤ –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. _(–î–ª—è –ê–¥–º–∏–Ω–æ–≤)_\n‚î£ –í–Ω–µ—Å—Ç–∏ *–ò–≥—Ä–æ–≤–æ–π –ù–∏–∫* –≤ –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. _(–î–ª—è –ê–¥–º–∏–Ω–æ–≤)_\n‚î£ –ó–∞–π—Ç–∏ –≤ –æ–±—â—É—é *–±–µ—Å–µ–¥—É*! _(–î–ª—è –≤—Å–µ—Ö)_\n‚îó*–ë–æ—Ç —Å–æ–∑–¥–∞–Ω @irinquechannel*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—Ç–∞:*", parse_mode="Markdown", reply_markup=ChooseMode)

    # –ï—Å–ª–∏ —Ä–æ–ª—å —á–µ–ª–æ–≤–µ–∫–∞ - –ò–≥—Ä–æ–∫
    elif bool(len(check)) and cursor.execute("SELECT user_role FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchone()[0] == "User":
        role = cursor.execute("SELECT user_role FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchone()[0]
        usermessage = await bot.send_message(message.from_user.id, f"üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º*, @{message.from_user.first_name}!\n–í–∞—à —Å—Ç–∞—Ç—É—Å: *–ò–≥—Ä–æ–∫*\n\n*–ë–æ—Ç —Å–æ–∑–¥–∞–Ω @irinquechannel*", parse_mode="Markdown")
        cursor.close()
        connect.commit()
        connect.close()
        await usermessage.edit_text("*–ì–õ–ê–í–ù–û–ï* –ú–ï–ù–Æ –ë–û–¢–ê:\n\n‚îè*üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *–Ω–∏–∫—É* _(–í–≤–æ–¥–∏—Ç–µ –Ω–∏–∫ —Ç–æ—á–Ω–æ)_\n‚î£*üîé –ü–†–û–í–ï–†–ò–¢–¨ ID* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *SteamID*\n‚îó*üí≠ –ë–ï–°–ï–î–ê* - –ë–µ—Å–µ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ *DayZ*", parse_mode="Markdown", reply_markup=MainMenu)


    # –ï—Å–ª–∏ —Ä–æ–ª—å —á–µ–ª–æ–≤–µ–∫–∞ - –ü—Ä–æ–≤–µ—Ä–∫–∞
    elif bool(len(check)) and cursor.execute("SELECT user_role FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchone()[0] == "Verification":
        role = cursor.execute("SELECT user_role FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchone()[0]
        vermessage = await bot.send_message(message.from_user.id, f"üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º*, @{message.from_user.first_name}!\n–í–∞—à —Å—Ç–∞—Ç—É—Å: *–ü—Ä–æ–≤–µ—Ä–∫–∞*\n\n*–ë–æ—Ç —Å–æ–∑–¥–∞–Ω @irinquechannel*", parse_mode="Markdown")
        cursor.close()
        connect.commit()
        connect.close()
        await vermessage.message.edit_text("*–ì–õ–ê–í–ù–û–ï* –ú–ï–ù–Æ –ë–û–¢–ê:\n\n‚îè*üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *–Ω–∏–∫—É* _(–í–≤–æ–¥–∏—Ç–µ –Ω–∏–∫ —Ç–æ—á–Ω–æ)_\n‚î£*üîé –ü–†–û–í–ï–†–ò–¢–¨ ID* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *SteamID*\n‚îó*üí≠ –ë–ï–°–ï–î–ê* - –ë–µ—Å–µ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ *DayZ*", parse_mode="Markdown", reply_markup=MainMenu)


    # –ï—Å–ª–∏ —Ä–æ–ª—å —á–µ–ª–æ–≤–µ–∫–∞ - –ê–¥–º–∏–Ω
    elif bool(len(check)) and cursor.execute("SELECT user_role FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchone()[0] == "Admin":
        role = cursor.execute("SELECT user_role FROM `users` WHERE `user_id` = ?", (message.from_user.id,)).fetchone()[0]
        adminmessage = await bot.send_message(message.from_user.id, f"üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º*, @{message.from_user.first_name}!\n–í–∞—à —Å—Ç–∞—Ç—É—Å: *–ê–¥–º–∏–Ω*\n\n*–ë–æ—Ç —Å–æ–∑–¥–∞–Ω @irinquechannel*", parse_mode="Markdown")
        cursor.close()
        connect.commit()
        connect.close()
        time.sleep(5)
        await adminmessage.edit_text(text='*–ê–î–ú–ò–ù* –ú–ï–ù–Æ –ë–û–¢–ê:\n\n‚îè*üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *–Ω–∏–∫—É* _(–í–≤–æ–¥–∏—Ç–µ –Ω–∏–∫ —Ç–æ—á–Ω–æ)_\n‚î£*üîé –ü–†–û–í–ï–†–ò–¢–¨ ID* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *SteamID*\n‚î£*‚ûï –î–û–ë–ê–í–ò–¢–¨ –ß–ò–¢–ï–†–ê* - –ó–∞–ø–æ–ª–Ω–∏—Ç—å *—Ñ–æ—Ä–º—É* –∏ *–î–æ–±–∞–≤–∏—Ç—å* –≤ –ë–î\n‚îó*üí≠ –ë–ï–°–ï–î–ê* - –ë–µ—Å–µ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ *DayZ*', parse_mode="Markdown", reply_markup=MainMenuAdmin)

@dp.callback_query_handler(lambda call: True)
async def calls(call, state: FSMContext):
    connect = sqlite3.connect(Database)
    cursor = connect.cursor()
    # –î–µ–ª–∞–µ–º —Å—Ç–∞—Ç—É—Å –Æ–∑–µ—Ä
    if call.data == "User":
        cursor.execute("UPDATE users SET user_role = ? WHERE user_id = ?", ("User", call.from_user.id))
        cursor.close()
        connect.commit()
        connect.close()
        await call.message.edit_text("*–ì–õ–ê–í–ù–û–ï* –ú–ï–ù–Æ –ë–û–¢–ê:\n\n‚îè*üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *–Ω–∏–∫—É* _(–í–≤–æ–¥–∏—Ç–µ –Ω–∏–∫ —Ç–æ—á–Ω–æ)_\n‚î£*üîé –ü–†–û–í–ï–†–ò–¢–¨ ID* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *SteamID*\n‚îó*üí≠ –ë–ï–°–ï–î–ê* - –ë–µ—Å–µ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ *DayZ*", parse_mode="Markdown", reply_markup=MainMenu)
    # –î–µ–ª–∞–µ–º —Å—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω
    if call.data == "Admin":
        cursor.execute("UPDATE users SET user_role = ? WHERE user_id = ?", ("Verification", call.from_user.id))
        cursor.close()
        connect.commit()
        connect.close()
        await call.message.edit_text("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *–ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ *–∫–æ–¥*! _(–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞)_\n\n*–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:*", parse_mode="Markdown", reply_markup=Return)
        await Verefication.Code.set()
        @dp.message_handler(content_types=['text'], state=Verefication.Code)
        async def check_messages(message: types.Message, state: FSMContext):
            connect = sqlite3.connect(Database)
            cursor = connect.cursor()
            password = cursor.execute("SELECT admin_password FROM data").fetchone()[0]
            if message.text == password:
                accept = await message.answer("‚úÖ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω *–í–µ—Ä–Ω–æ!*\n_(–î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω)_", parse_mode="Markdown")
                await state.finish()
                time.sleep(1)
                await accept.edit_text(text='*–ê–î–ú–ò–ù* –ú–ï–ù–Æ –ë–û–¢–ê:\n\n‚îè*üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *–Ω–∏–∫—É* _(–í–≤–æ–¥–∏—Ç–µ –Ω–∏–∫ —Ç–æ—á–Ω–æ)_\n‚î£*üîé –ü–†–û–í–ï–†–ò–¢–¨ ID* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *SteamID*\n‚î£*‚ûï –î–û–ë–ê–í–ò–¢–¨ –ß–ò–¢–ï–†–ê* - –ó–∞–ø–æ–ª–Ω–∏—Ç—å *—Ñ–æ—Ä–º—É* –∏ *–î–æ–±–∞–≤–∏—Ç—å* –≤ –ë–î\n‚îó*üí≠ –ë–ï–°–ï–î–ê* - –ë–µ—Å–µ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ *DayZ*', parse_mode="Markdown", reply_markup=MainMenuAdmin)
                cursor.execute("UPDATE users SET user_role = ? WHERE user_id = ?", ("Admin", call.from_user.id))
                cursor.close()
                connect.commit()
                connect.close()
                
        @dp.callback_query_handler(lambda call: True, state=Verefication)
        async def process_callback(call: types.CallbackQuery, state: FSMContext):
            if call.data == "back":
                connect = sqlite3.connect(Database)
                cursor = connect.cursor()
                await state.reset_state(with_data=False)
                await call.message.edit_text(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{call.from_user.first_name}!\n*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å* –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞!\n\n–ë–æ—Ç *–ø–æ–∑–≤–æ–ª—è–µ—Ç:*\n‚îè –ü—Ä–æ–≤–µ—Ä–∏—Ç—å *SteamID* –∏–≥—Ä–æ–∫–∞! _(–î–ª—è –≤—Å–µ—Ö)_\n‚î£ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å *–∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫* _(–î–ª—è –≤—Å–µ—Ö)_\n‚î£ –í–Ω–µ—Å—Ç–∏ *SteamID* –≤ –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. _(–î–ª—è –ê–¥–º–∏–Ω–æ–≤)_\n‚î£ –í–Ω–µ—Å—Ç–∏ *–ò–≥—Ä–æ–≤–æ–π –ù–∏–∫* –≤ –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. _(–î–ª—è –ê–¥–º–∏–Ω–æ–≤)_\n‚î£ –ó–∞–π—Ç–∏ –≤ –æ–±—â—É—é *–±–µ—Å–µ–¥—É*! _(–î–ª—è –≤—Å–µ—Ö)_\n‚îó*–ë–æ—Ç —Å–æ–∑–¥–∞–Ω @irinquechannel*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ—Ç–∞:*", parse_mode="Markdown", reply_markup=ChooseMode)
                cursor.execute("UPDATE users SET user_role = ? WHERE user_id = ?", ("None", call.from_user.id))
                cursor.close()
                connect.commit()
                connect.close()
                                        
    # –ü–†–û–í–ï–†–ö–ê –ù–ò–ö–û–í –ò STEAM ID + –í–ù–û–° –í –ë–î
    if call.data == "addcheater":
        connect = sqlite3.connect(Database)
        cursor = connect.cursor()
        user_name = types.User.get_current()
        cursor.execute("INSERT INTO cheaters (reporter) VALUES (?)", (user_name["username"],))
        await AddCheater.SteamID.set()
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ *SteamID* —á–∏—Ç–µ—Ä–∞: üì≤", parse_mode="Markdown")
        cursor.close()
        connect.commit()
        connect.close()
        @dp.message_handler(content_types=['text'], state=AddCheater.SteamID)
        async def get_steamid(message: types.Message, state: FSMContext):
            connect = sqlite3.connect(Database)
            cursor = connect.cursor()
            cursor.execute("UPDATE cheaters SET steam_id = ? WHERE reporter = ?", (message.text, user_name['username']))
            await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ *–ù–∏–∫–Ω–µ–π–º* —á–∏—Ç–µ—Ä–∞: üìù", parse_mode="Markdown")
            await AddCheater.next()
            cursor.close()
            connect.commit()
            connect.close()
        @dp.message_handler(content_types=['text'], state=AddCheater.Nickname)
        async def get_steamid(message: types.Message, state: FSMContext):
            connect = sqlite3.connect(Database)
            cursor = connect.cursor()
            cursor.execute("UPDATE cheaters SET nickname = ? WHERE reporter = ?", (message.text.lower(), user_name['username']))
            await bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã *—É—Å–ø–µ—à–Ω–æ!* ‚úÖ", parse_mode="Markdown")
            await state.finish()
            await message.answer('*–ê–î–ú–ò–ù* –ú–ï–ù–Æ –ë–û–¢–ê:\n\n‚îè*üîé –ü–†–û–í–ï–†–ò–¢–¨ –ù–ò–ö* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *–Ω–∏–∫—É* _(–í–≤–æ–¥–∏—Ç–µ –Ω–∏–∫ —Ç–æ—á–Ω–æ)_\n‚î£*üîé –ü–†–û–í–ï–†–ò–¢–¨ ID* - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ *SteamID*\n‚î£*‚ûï –î–û–ë–ê–í–ò–¢–¨ –ß–ò–¢–ï–†–ê* - –ó–∞–ø–æ–ª–Ω–∏—Ç—å *—Ñ–æ—Ä–º—É* –∏ *–î–æ–±–∞–≤–∏—Ç—å* –≤ –ë–î\n‚îó*üí≠ –ë–ï–°–ï–î–ê* - –ë–µ—Å–µ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ *DayZ*', parse_mode="Markdown", reply_markup=MainMenuAdmin)
            cursor.close()
            connect.commit()
            connect.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
    if call.data == "checknickname":
        connect = sqlite3.connect(Database)
        cursor = connect.cursor()
        await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–∏–∫–Ω–µ–π–º* —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å üì†", parse_mode="Markdown")
        await CheckNick.Nickname.set()
        @dp.message_handler(content_types=['text'], state=CheckNick.Nickname)
        async def check_nickname(message: types.Message, state: FSMContext):
            result_id = cursor.execute("SELECT steam_id FROM cheaters WHERE nickname = ?", (message.text.lower(),)).fetchone()
            if bool(result_id):
                await bot.send_message(message.from_user.id, f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–æ–∏—Å–∫–∞:*\n‚û§ –ò–≥—Ä–æ–≤–æ–π –ù–∏–∫–Ω–µ–π–º: *{message.text}*\n‚û§ SteamID: *{result_id[0]}*\n‚û§ –†–µ–∑—É–ª—å—Ç–∞—Ç: *–ò–≥—Ä–æ–∫ - –ß–∏—Ç–µ—Ä ‚ùå*", parse_mode="Markdown")
                await state.finish()
            else:
                await bot.send_message(message.from_user.id, f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–æ–∏—Å–∫–∞:*\n‚û§ –ò–≥—Ä–æ–≤–æ–π –ù–∏–∫–Ω–µ–π–º: *{message.text}*\n‚û§ SteamID: *–ù–µ –Ω–∞–π–¥–µ–Ω*\n‚û§ –†–µ–∑—É–ª—å—Ç–∞—Ç: *–ò–≥—Ä–æ–∫ - –ß–µ—Å—Ç–Ω—ã–π ‚úÖ*", parse_mode="Markdown")
                await state.finish()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SteamID
    if call.data == "checkid":
        connect = sqlite3.connect(Database)
        cursor = connect.cursor()
        await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ *SteamID* —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å üì†", parse_mode="Markdown")
        await CheckID.ID.set()
        @dp.message_handler(content_types=['text'], state=CheckID.ID)
        async def check_id(message: types.Message, state: FSMContext):
            result_nickname = cursor.execute("SELECT nickname FROM cheaters WHERE steam_id = ?", (message.text,)).fetchone()
            result_steamid = cursor.execute("SELECT steam_id FROM cheaters WHERE nickname = ?", (message.text.lower(),)).fetchone()

            if bool(result_nickname):
                await bot.send_message(message.from_user.id, f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–æ–∏—Å–∫–∞:*\n‚û§ –ò–≥—Ä–æ–≤–æ–π –ù–∏–∫–Ω–µ–π–º: *{result_nickname[0]}*\n‚û§ SteamID: *{message.text}*\n‚û§ –†–µ–∑—É–ª—å—Ç–∞—Ç: *–ò–≥—Ä–æ–∫ - –ß–∏—Ç–µ—Ä ‚ùå*", parse_mode="Markdown")
                await state.finish()
            else:
                await bot.send_message(message.from_user.id, f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–æ–∏—Å–∫–∞:*\n‚û§ –ò–≥—Ä–æ–≤–æ–π –ù–∏–∫–Ω–µ–π–º: *–ù–µ –Ω–∞–π–¥–µ–Ω*\n‚û§ SteamID: *{message.text}*\n‚û§ –†–µ–∑—É–ª—å—Ç–∞—Ç: *–ò–≥—Ä–æ–∫ - –ß–µ—Å—Ç–Ω—ã–π ‚úÖ*", parse_mode="Markdown")
                await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)